
clear
`#PREREQ' use "build/output/essential_industries1.dta"

* Generate empty obs for unmatched census industry codes
levelsof census_partial1, local(unmatched1)
levelsof census_partial2, local(unmatched2)

gen census_industry = census_matched
gen matched = 1
forvalues im = 1/2 {
tokenize `unmatched`im''
while "`1'" != "" {
	set obs `= _N + 1'
	replace census_industry = `1' if _n == _N
	macro shift
}
}
replace matched = 0 if missing(matched)
drop census_partial*
drop if missing(census_industry)

* Aggregate from 6d to 4d using arithmetic means
bysort census_industry code4d: egen ess4d = mean(essential)
drop essential
rename ess4d essential

* Record distinct 6d codes within each 4d-census combination
bysort census_industry code4d: gen i5d = _n

preserve
keep census_industry code4d code5d i5d
reshape wide code5d, i(census_industry code4d) j(i5d)

gen id = _n
rowdistinct code5d*, gen(distinct_industries) id(id)
drop id code5d*

tempfile tmp4d
save `tmp4d'
restore

drop code5d naics i5d description
duplicates drop code4d census_industry, force
merge 1:1 code4d census_industry using `tmp4d', nogen

// MERGE OES
rename code4d naics4d
`#PREREQ' local oesdata "../OES/build/output/oes4d_cleaned.dta"
merge m:1 naics4d using "`oesdata'", keep(1 3) nogen keepusing(employment)
rename naics4d code4d

bysort census_matched: egen emp_nm = count(employment)
bysort census_matched: gen emp_available = (emp_nm == _N)
gen weight = employment if emp_available
replace weight = 1 if !emp_available
replace employment = . if !emp_available


rename employment emp4d
* Get employment at 3d level
bysort code3d 

* If a census code has constant 4d code and spans that industry, use 4d employment figure
bysort census_matched (code4d): gen const4d = (code4d[_N] == code4d[1])
bysort code4d (census_matched): gen onecensus4d = (census_matched[_N] == census_matched[1])
gen use4d = const4d & onecensus4d
gen employment = emp4d if use4d

* Similarly, at 3d level
bysort census_matched (code3d): gen const3d = (code3d[_N] == code3d[1])
bysort code3d (census_matched): gen onecensus3d = (census_matched[_N] == census_matched[1])
gen use3d = const3d & onecensus3d & !use4d
bysort census_matched: replace employment = total(emp4d) if 

* Collapse
collapse (mean) essential (sum) nworkers (firstnm) matched [iw=weight], by(census_industry)
replace nworkers = . if (nworkers == 0)
drop if missing(census_industry)

label variable matched "Indicator of match status"
label define matched_lbl 0 "Could not match census industry to NAICS"
label define matched_lbl 1 "Successful match", add
label values matched matched_lbl

label variable essential "Share of census industry deemed essential"
label variable census_industry "2017 Census industry code"

rename nworkers employment
label variable employment "Employment in industry, from OES"
