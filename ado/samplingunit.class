/* Class: samplingunit */

/* This class is used to create a variable that uniquely identifies
a sampling unit, and to create weights that apportion household-level
assets between the members */

/* Usage:

--- Initialization ---
.su = .samplingunit.new

--- Setting the identifiers ---
(1)	Set the dynamic group id. The variable used for the dynamic group must,
	separately in each time period, uniquely identify candidate groups.

.su.set_groupid groupidvariable

(2)	Set the person-level id. The variable used here must uniquely identify
	each individual. Must be constant across time for each individual. The
	range() option is used to specify the minimum and maximum values for
	the panelid. Despite the syntax, the range option is required.

.su.set_individualid indidvariable, range(1 12)

(3)	Set the panel id. This variable must identify the time dimension.

.su.set_panelid panelidvariable

(4)	Set the group head id. This variable must take the value of one for every
	individual that is the group head and zero otherwise. Any individuals
	which have a one in this variable for at least one time period but do
	not have a one in this variable for every time period will be
	coded as missing in the final sampling unit variable.

.su.set_grouphead groupheadvariable

--- Create the sampling unit variable ---
.su.create

--- Add members to current groups ---
In this step, other members are added to pre-existing groups. The group head
was assigned a memberid of 1, and members added in this step can be assigned
a different memberid with the memberid() option. The required option stipulates
that if the added member does not show up in all periods or is not identified
as being a new group member for all periods, then the group head is dropped.
Otherwise, the new member is simply not added if either of those two conditions
fail. This variable used here must take on zero or one, and the group member
will be paired with the group head based on the dynamic groupid supplied
previously.

.su.assign_member newmembervariable, memberid(2) required

--- Create new groups ---
In this step, new groups may be identified and their members may be assigned
a new memberid. The variable used here must take on a zero or one. Groups
will only be created if an individual has a one for this variable in each
period. The user should take care not to allow for any of the potential new
groups to overlap with previously created groups.

.su.new_groups newgroupvariable, memberid(3)

--- Create ownership weights for household-level variables ---
Here the user specifies the name for the asset weight variable, and the
memberids used to identify individuals who will recieve equal shares of the
household-level asset variables. The replace option will drop and replace
the variable name chosen for the weights variable if necessary.

.su.create_ownership_weights aweights, memberids(1 2) replace
*/

class samplingunit {
	string groupid = "_sampleunit"
	string memberid = "_memberid"
	string aweight = "_aweight"
	string indid
	string dyngroupid
	string panelid
	string grouphead
	string required = "_required"
	
	double nperiods
	double panel0
	double panelT
}
program .set_groupid
	args x
	.dyngroupid = "`x'"
end
program .set_individualid
	args x
	.indid = "`x'"
end
program .set_panelid
	syntax varlist [, RANGE(numlist)]
	.panelid = "`varlist'"
	
	tokenize `range'
	.panel0 = `1'
	.panelT = `2'
	.nperiods = `2' - `1' + 1
end
program .set_grouphead
	args x
	.grouphead = "`x'"
end
program .create
	tempfile sutmp1
	save `sutmp1'
	
	* Check that head uniquely identifies group
	keep if `.panelid' == `.panel0'
	tempvar tmpv1
	bysort `.dyngroupid': egen `tmpv1' = total(`.grouphead')
	quietly sum `tmpv1'
	if `r(max)' > 1 {
		di "More than one group head identified in first time period"
		use `sutmp1', clear
		class exit -1
	}
	use `sutmp1', clear
	
	* Create unique group identifier
	capture drop `.groupid'
	tempvar ah1 ah2 alwayshead
	bysort `.indid': gen `ah1' = _N
	bysort `.indid': egen `ah2' = min(`.grouphead')
	gen `alwayshead' = (`ah1' == `.nperiods') & (`ah2' == 1)
	gen `.groupid' = `.indid' if (`alwayshead' == 1)

	* Designate as a main group member
	capture drop `.memberid'
	gen `.memberid' = 1 if (`alwayshead' == 1)
	label variable `.memberid' "Member id within sampling unit"
	label define memberid_lbl 1 "Primary sample unit member"
	label variable `.memberid' memberid_lbl
	
	* Generate required members variable
	capture drop `.required'
	gen `.required' = 1 if (`alwayshead' == 1)
end
program .assign_member
	syntax varlist [, MEMBERID(int 0)] [, REQUIRED]
	
	* Group id extended to non-head
	tempvar groupconst
	bysort `.dyngroupid': egen `groupconst' = max(`.groupid')

	* Set group id
	tempvar candidate 
	bysort `.indid': egen `candidate' = max(`varlist')
	replace `.groupid' = `groupconst' if (`candidate' == 1)
	replace `.memberid' = `memberid' if (`candidate' == 1)

	* Check if candidate is available in all periods
	tempvar isavail
	bysort `.indid': gen `isavail' = (_N == `.nperiods')
	replace `isavail' = . if (`candidate' == 0)
	
	* Check if property holds for all years
	tempvar holdsall
	bysort `.indid': egen `holdsall' = min(`varlist')
	replace `holdsall' = . if (`candidate' == 0)
	
	* Drop households if member is required but not always present
	if "`required'" == "required" {	
		* If required member not available for all periods
		tempvar reqnoavail
		bysort `.groupid': egen `reqnoavail' = min(`isavail')
		
		
		* If property doesn't hold for all years
		tempvar reqnohold
		bysort `.groupid': egen `reqnohold' = min(`holdsall')
		
		replace `.groupid' = . if (`reqnoavail' == 0)
		replace `.groupid' = . if (`reqnohold' == 0)
	}
	else {
		tempvar badind
		replace `.groupid' = . if (`isavail' == 0)
		replace `.groupid' = . if (`holdsall' == 0)
	}
	replace `.memberid' = . if missing(`.groupid')
end
program .new_groups
	syntax namelist [, MEMBERID(int 0)]
	
	tempvar candidate holdsall
	bysort `.indid': egen `candidate' = max(`namelist')
		
	* Check if property holds for all years
	bysort `.indid': egen `holdsall' = min(`namelist')
	replace `holdsall' = . if (`candidate' == 0)

	* Check if candidate is available in all periods
	tempvar isavail
	bysort `.indid': gen `isavail' = (_N == `.nperiods')
	replace `isavail' = . if (`candidate' == 0)
	
	* Assign new group variable
	replace `.groupid' = `.indid' if (`isavail' == 1) & (`holdsall' == 1)
	replace `.memberid' = `memberid' if (`isavail' == 1) & (`holdsall' == 1)
end
program .create_ownership_weights
	syntax namelist [, MEMBERIDS(string)] [, REPLACE]
	
	if "`replace'" == "replace" {
		capture drop `namelist'
	}

	* Identify individuals to get asset share
	tempvar nowners mainmems
	gen `mainmems' = inlist(`.memberid', `memberids')
	
	* Number of these individuals per group
	bysort `.groupid' `.panelid': egen `nowners' = count(`mainmems')
	
	* Set weights
	gen `namelist' = 1 / `nowners' if inlist(`.memberid', `memberids')
	replace `namelist' = 0 if !missing(`.groupid') & missing(`namelist')
end
program .tab_groups
	syntax [anything] [, ALLPERIODS]

	tempvar nsample
	tempname nperiods
	scalar nperiods = `.panelT' - `.panel0'

	if "`allperiods'" == "allperiods" {
		bysort `.groupid': gen `nsample' = _N
	}
	else {
		local restriction & (`.panelid' == `.panel0')
		bysort `.groupid' `.panelid': gen `nsample' = _N
	}

	tempvar allyrs
	bysort `.indid' (`.panelid'): gen `allyrs' = (`.panelid'[_N] - `.panelid'[1] == nperiods)
	quietly count if missing(`.groupid') & (`allyrs' == 1) & (`.panelid' == `.panel0')

	tempname nmissing nused pctused
	local nmissing = `r(N)'

	label variable `nsample' "Group size"
	tab `nsample' if !missing(`.groupid') `restriction'
	local nused = `r(N)'
	local pctused = `nused' / (`nmissing' + `nused') * 100
	
	di
	di as text "# obs present in all yrs but not assigned a sampling unit: " as result "`nmissing'"
	di as text "% of obs present in all yrs that were not assigned a sampling unit: " as result %4.1f `pctused'
	
end
program .sort_groups
	syntax [varlist] [, BR]
	
	tempname svars
	local svars `.groupid' `.memberid' `.indid' `.panelid'
	sort `svars'
	
	if "`br'" == "br" {
		br `svars' `varlist'
	}
end
